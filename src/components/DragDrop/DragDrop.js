import React from 'react';

export default function DragDropFile() {
  const [dragActive, setDragActive] = React.useState(false);

  const inputRef = React.useRef(null);

  const handleDrag = function (e) {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = function (e) {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      // handleFiles(e.dataTransfer.files);
    }
  };

  const handleChange = function (e) {
    e.preventDefault();
    if (e.target.files && e.target.files[0]) {
      // handleFiles(e.target.files);
    }
  };

  const onButtonClick = () => {
    inputRef.current.click();
  };

  return (
    <form
      id="form-file-upload"
      onDragEnter={handleDrag}
      onSubmit={e => e.preventDefault()}
    >
      <input
        ref={inputRef}
        type="file"
        id="input-file-upload"
        multiple={true}
        onChange={handleChange}
      />
      <label
        id="label-file-upload"
        htmlFor="input-file-upload"
        className={dragActive ? 'drag-active' : ''}
      >
        <div>
          <svg
            width="49"
            height="43"
            viewBox="0 0 49 43"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M25.6507 10.5569L25.7503 10.5866L25.7564 10.5796C26.0845 10.6235 26.4033 10.4228 26.4998 10.0971C27.3276 7.31579 29.9358 5.37244 32.8413 5.37244C33.2183 5.37244 33.524 5.0667 33.524 4.68974C33.524 4.31276 33.2183 4.00703 32.8413 4.00703C29.2159 4.00703 26.1695 6.42086 25.1914 9.70792C25.0836 10.0694 25.2896 10.4492 25.6507 10.5569Z"
              fill="#4C95EB"
              stroke="#F9FFF9"
              stroke-width="0.322847"
            />
            <path
              d="M40.1385 30.2325H37.0109C36.7231 30.2325 36.4896 29.9991 36.4896 29.7113C36.4896 29.4235 36.7231 29.19 37.0109 29.19H40.1385C44.4498 29.19 47.9576 25.6822 47.9576 21.3709C47.9576 17.0596 44.4498 13.5518 40.1385 13.5518H40.0633C39.9121 13.5518 39.7684 13.4862 39.6694 13.3719C39.5703 13.2576 39.5256 13.1061 39.5472 12.9564C39.5938 12.6317 39.6172 12.3055 39.6172 11.9879C39.6172 8.25153 36.577 5.21133 32.8406 5.21133C31.387 5.21133 30.0008 5.66558 28.8316 6.5253C28.5747 6.71408 28.2098 6.63031 28.0612 6.34769C24.75 0.0425289 16.1016 -0.804191 11.6178 4.68075C9.72891 6.99148 8.98676 9.99737 9.58145 12.927C9.64698 13.2506 9.39937 13.5522 9.0706 13.5522H8.86172C4.55044 13.5522 1.0426 17.06 1.0426 21.3713C1.0426 25.6826 4.55044 29.1904 8.86172 29.1904H11.9893C12.2771 29.1904 12.5106 29.4238 12.5106 29.7117C12.5106 29.9995 12.2772 30.233 11.9893 30.233H8.86172C3.97547 30.233 0 26.2575 0 21.3712C0 16.6221 3.75538 12.7333 8.45251 12.5189C8.01129 9.47942 8.85502 6.41358 10.8105 4.02097C15.6111 -1.85192 24.811 -1.19365 28.7 5.35506C29.9407 4.57724 31.3603 4.1692 32.8405 4.1692C37.3674 4.1692 40.9545 8.02218 40.6406 12.5237C45.2945 12.7847 49 16.6529 49 21.3709C49 26.2575 45.0245 30.2326 40.1383 30.2326L40.1385 30.2325Z"
              fill="#4C95EB"
            />
            <path
              d="M11.237 29.4173C11.237 36.6923 17.1555 42.6107 24.4305 42.6107C31.7055 42.6107 37.6239 36.6922 37.6239 29.4173C37.6239 22.1422 31.7055 16.2238 24.4305 16.2238C17.1554 16.2238 11.237 22.1423 11.237 29.4173ZM12.6027 29.4173C12.6027 22.8957 17.9088 17.5895 24.4305 17.5895C30.9521 17.5895 36.2583 22.8956 36.2583 29.4173C36.2583 35.9389 30.9521 41.2451 24.4305 41.2451C17.9089 41.2451 12.6027 35.939 12.6027 29.4173Z"
              fill="#4C95EB"
              stroke="#F9FFF9"
              stroke-width="0.322847"
            />
            <path
              d="M24.1237 34.663C24.1237 34.9629 24.3669 35.2061 24.6668 35.2061C24.9666 35.2061 25.2098 34.9633 25.2098 34.663V24.7405C25.2098 24.4406 24.9667 24.1975 24.6668 24.1975C24.3669 24.1975 24.1237 24.4407 24.1237 24.7405V34.663Z"
              fill="#4C95EB"
              stroke="#B2CFF1"
              stroke-width="0.322847"
            />
            <path
              d="M27.9901 28.064L28.1044 28.1779C27.9982 28.2845 27.8586 28.3372 27.7202 28.3372L27.9901 28.064ZM27.9901 28.064C27.9156 28.1387 27.8178 28.1757 27.7202 28.1757L27.9901 28.064ZM27.9901 28.064L28.1042 28.1781C28.3163 27.966 28.3163 27.6222 28.1042 27.4101L25.0512 24.3571C24.8391 24.145 24.4951 24.1448 24.2831 24.3571C24.2831 24.3571 24.2831 24.3571 24.2831 24.3571C24.2831 24.3571 24.2831 24.3571 24.283 24.3572L21.2301 27.4101C21.018 27.6222 21.018 27.966 21.2301 28.1781C21.4422 28.3902 21.7862 28.3904 21.9981 28.1781C21.9981 28.1781 21.9982 28.1781 21.9982 28.1781C21.9982 28.1781 21.9982 28.178 21.9982 28.178L24.6672 25.5091M27.9901 28.064L24.6672 25.5091M24.6672 25.5091L27.3362 28.1781C27.4421 28.284 27.5816 28.3372 27.7202 28.3372L24.6672 25.5091Z"
              fill="#4C95EB"
              stroke="#B2CFF1"
              stroke-width="0.322847"
            />
          </svg>

          <p>
            Drag and drop files or{' '}
            <span
              style={{ color: 'rgba(76, 149, 235, 1)' }}
              // onClick={onButtonClick}
            >
              <u>Browse</u>
            </span>
          </p>
        </div>
      </label>
      {dragActive && (
        <div
          id="drag-file-element"
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        ></div>
      )}
    </form>
  );
}
